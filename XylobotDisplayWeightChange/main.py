# python 3.7.0
# py -m pip install pyserial
# py -m pip install PyQt5

# 제목 : Display Weight Change v1.1.0
# 날짜 : 2020.12.24
# 설명 : 다른 프로젝트와 코드 통합

import os
import sys
import math

from PyQt5 import QtWidgets, QtGui, QtCore

self_path = os.path.dirname(__file__)
common_path = os.path.dirname(os.path.abspath(self_path)) + '/Common'
neural_path = os.path.dirname(os.path.abspath(self_path)) + '/NeuralNetwork'
sys.path.append(common_path)
sys.path.append(neural_path)
import xylobot
import xylobotSerial
import component
import ann

class GernerateDataWidget(QtWidgets.QWidget):

    BUTTON_P1 = 0
    BUTTON_P2 = 1
    BUTTON_P3 = 2
    BUTTON_P4 = 3
    BUTTON_ROBOT_READY = 4
    BUTTON_DEFAULT_SETTING = 5

    LABEL_P1_AXIS1 = 0
    LABEL_P1_AXIS2 = 1
    LABEL_P2_AXIS1 = 2
    LABEL_P2_AXIS2 = 3
    LABEL_P3_AXIS1 = 4
    LABEL_P3_AXIS2 = 5
    LABEL_P4_AXIS1 = 6
    LABEL_P4_AXIS2 = 7

    def __init__(self, parent):
        super().__init__()
        self.main = parent
        self.target_setting = False
        self.sss = [False, False, False, False]

        self.initUI()
    
    def initUI(self):
        # title layout
        title = component.Title(
            title='Create Learning Data',
            first_line='Learning data can be Generated by reading the joint angle values.',
            second_line='(For simplicity, 1 axis and 3 axis are used and 2 axis is fixed at 45)'
            )
        title.setEnablePreviousButton(False)
        title.next_btn.clicked.connect(self.clickNextButton)
        # coordinates image
        pixmap = QtGui.QPixmap(self_path + '/Images/coordinates.png')
        img_lbl = QtWidgets.QLabel()
        img_lbl.setPixmap(pixmap)
        
        # setting angle button
        btn = []
        name_text = ['P1 Setting', 'P2 Setting', 'P3 Setting', 'P4 Setting']
        btn_vbox1 = QtWidgets.QVBoxLayout()
        btn_vbox1.addStretch(3)
        for index in range(0, 4):
            btn.append(QtWidgets.QPushButton(name_text[index], self))
            btn[index].setStyleSheet(
                'color: rgb(58, 134, 255);'
                'background-color: rgb(230, 230, 230);'
                'border-radius: 25px;'
                'font: bold 30px Tohama;'
                )
            btn[index].setFixedSize(200, 50)
            btn_vbox1.addWidget(btn[index])
            btn_vbox1.addStretch(1)
        btn[GernerateDataWidget.BUTTON_P1].clicked.connect(self.clickP1Button)
        btn[GernerateDataWidget.BUTTON_P2].clicked.connect(self.clickP2Button)
        btn[GernerateDataWidget.BUTTON_P3].clicked.connect(self.clickP3Button)
        btn[GernerateDataWidget.BUTTON_P4].clicked.connect(self.clickP4Button)

        # display angle button
        comma_lbl = QtWidgets.QLabel(',', self)
        comma_lbl.setStyleSheet(
            'color: Black;'
            'font: 30px Tohama;'
            )
        comma_lbl.setFixedSize(30, 50)
        name_text.clear()
        name_text = ['Axis 1', 'Axis 3']
        set_lbl = []
        for index in range(0, 2):
            set_lbl.append(QtWidgets.QLabel(name_text[index], self))
            set_lbl[index].setStyleSheet(
                'color: Black;'
                'font: bold 30px Tohama;'
                )
            set_lbl[index].setFixedSize(130, 50)
            set_lbl[index].setAlignment(QtCore.Qt.AlignCenter)
        set_lbl_hbox = QtWidgets.QHBoxLayout()
        set_lbl_hbox.addWidget(set_lbl[0])
        set_lbl_hbox.addWidget(comma_lbl)
        set_lbl_hbox.addWidget(set_lbl[1])
        
        # weight label
        self.lbl = []
        lbl_hbox = []
        lbl_vbox = QtWidgets.QVBoxLayout()
        lbl_vbox.addLayout(set_lbl_hbox)
        for i in range(0, 4):
            for j in range(0, 2):
                index = i * 2 + j
                self.lbl.append(QtWidgets.QLabel('0.00', self))
                self.lbl[index].setStyleSheet(
                    'color: Black;'
                    'font: 30px Tohama;'
                    )
                self.lbl[index].setFixedSize(130, 50)
                self.lbl[index].setAlignment(QtCore.Qt.AlignRight)
            comma_lbl = QtWidgets.QLabel(',', self)
            comma_lbl.setStyleSheet(
                'color: Black;'
                'font: 30px Tahoma;'
                )
            comma_lbl.setFixedSize(30, 50)
            comma_lbl.setAlignment(QtCore.Qt.AlignCenter)
            lbl_hbox.append(QtWidgets.QHBoxLayout())
            lbl_hbox[i].addWidget(self.lbl[i * 2])
            lbl_hbox[i].addWidget(comma_lbl)
            lbl_hbox[i].addWidget(self.lbl[i * 2 + 1])
            lbl_vbox.addLayout(lbl_hbox[i])
        btn_lbl_hbox = QtWidgets.QHBoxLayout()
        btn_lbl_hbox.addLayout(btn_vbox1)
        btn_lbl_hbox.addStretch(1)
        btn_lbl_hbox.addLayout(lbl_vbox)

        # setting button
        under_hbox = []
        name_text.clear()
        name_text = ['Ready Robot', 'Set Default']
        for i in range(0, 2):
            index = i + 4
            btn.append(QtWidgets.QPushButton(name_text[i], self))
            btn[index].setStyleSheet(
                'color: white;'
                'background-color: rgb(58, 134, 255);'
                'border-radius: 5px;'
                'font: bold 30px Tahoma;'
                )
            btn[index].setFixedSize(250, 50)
            under_hbox.append(QtWidgets.QHBoxLayout())    
            under_hbox[i].addStretch(1)
            under_hbox[i].addWidget(btn[index])
            under_hbox[i].addStretch(1)
        btn[GernerateDataWidget.BUTTON_ROBOT_READY].clicked.connect(self.clickRobotReady)
        btn[GernerateDataWidget.BUTTON_DEFAULT_SETTING].clicked.connect(self.clickDefaultSetting)

        # apply layout
        img_btn_vbox = QtWidgets.QVBoxLayout()        
        img_btn_vbox.addWidget(img_lbl)
        img_btn_vbox.addLayout(under_hbox[0])
        btn_btn_vbox = QtWidgets.QVBoxLayout()
        btn_btn_vbox.addLayout(btn_lbl_hbox)
        btn_btn_vbox.addLayout(under_hbox[1])

        mid_hbox = QtWidgets.QHBoxLayout()
        mid_hbox.addStretch(1)
        mid_hbox.addLayout(img_btn_vbox)
        mid_hbox.addLayout(btn_btn_vbox)
        mid_hbox.addStretch(1)

        vbox = QtWidgets.QVBoxLayout()
        vbox.addLayout(title.vbox)
        vbox.addWidget(component.HLine())
        vbox.addLayout(mid_hbox)
        vbox.addStretch(1)

        self.setLayout(vbox)
        self.setWindowTitle('Generate Learning Data')
    
    def clickNextButton(self):
        if self.target_setting == False:
            self.clickDefaultSetting()
        self.main.stack_widget.setCurrentIndex(1)

    def clickP1Button(self):
        self.readAngle(0)

    def clickP2Button(self):
        self.readAngle(1)
    
    def clickP3Button(self):
        self.readAngle(2)
    
    def clickP4Button(self):
        self.readAngle(3)
    
    def clickRobotReady(self):
        temp_pos = self.main.xylobot.readPosition()
        temp_pos[1] = self.main.parameter.angleToPosition(self.main.parameter.AXIS_2, 45)
        print(temp_pos[1])
        pos = [0, 0, 0]
        for i in range(0, 3):
            pos[i] = int(round(temp_pos[i]))

        self.main.xylobot.writePosition(pos[0], pos[1], pos[2])
        self.main.xylobot.writeTorqueStatus(0, 1, 0)
    
    def clickDefaultSetting(self):
        array = 0
        for i in range(0, 4):
            for j in range(0, 2):
                self.main.target_data[i][j] = self.main.target_original_data[i][j]
                self.lbl[array].setText('%2.2f'%(self.main.target_data[i][j]))
                array += 1
            self.sss[i] = True
        self.target_setting = True
    
    def readAngle(self, index):
        pos = self.main.xylobot.readPosition()
        ang = [0.00, 0.00]

        if not(pos[0]) == -1:
            ang[0] = round(self.main.parameter.positionToAngle(self.main.parameter.AXIS_1, pos[0]), 2)
            ang[1] = round(self.main.parameter.positionToAngle(self.main.parameter.AXIS_3, pos[2]), 2)
            self.main.target_data[index] = ang

        self.lbl[index * 2].setText('%.2f'%(ang[0]))
        self.lbl[index * 2 + 1].setText('%.2f'%(ang[1]))
        self.sss[index] = True
        if (self.sss[0] == True) and (self.sss[1] == True) and (self.sss[2] == True) and (self.sss[3] == True):
            self.target_setting = True


class GenerateWeightWidget(QtWidgets.QWidget):

    BUTTON_DEFAULT = 0
    BUTTON_RANDOM = 1

    def __init__(self, parent):
        super().__init__()
        self.main = parent
        self.weight_setting = False 

        self.initUI()

    def initUI(self):
        # title layout
        title = component.Title(
            title='Create Weight Inital Value',
            first_line='Default value should be set between -1 and 1.',
            second_line='Can not use 0 to weight value and all weight value should be different.'
            )
        title.prev_btn.clicked.connect(self.clickPrevButton)
        title.next_btn.clicked.connect(self.clickNextButton)

        # display weight button
        self.weight_btn = []
        for i in range(0, 16):
            self.weight_btn.append(QtWidgets.QPushButton('0.00000', self))
            self.weight_btn[i].setStyleSheet(
                'color: rgb(150, 150, 150);'
                'background-color: transparent;'
                'border-radius: 5px;'
                'font: 15px Tahoma'
                )
            self.weight_btn[i].setFixedWidth(60)
        self.weight_btn[0].clicked.connect(self.clickWeightButton0)
        self.weight_btn[1].clicked.connect(self.clickWeightButton1)
        self.weight_btn[2].clicked.connect(self.clickWeightButton2)
        self.weight_btn[3].clicked.connect(self.clickWeightButton3)
        self.weight_btn[4].clicked.connect(self.clickWeightButton4)
        self.weight_btn[5].clicked.connect(self.clickWeightButton5)
        self.weight_btn[6].clicked.connect(self.clickWeightButton6)
        self.weight_btn[7].clicked.connect(self.clickWeightButton7)
        self.weight_btn[8].clicked.connect(self.clickWeightButton8)
        self.weight_btn[9].clicked.connect(self.clickWeightButton9)
        self.weight_btn[10].clicked.connect(self.clickWeightButton10)
        self.weight_btn[11].clicked.connect(self.clickWeightButton11)
        self.weight_btn[12].clicked.connect(self.clickWeightButton12)
        self.weight_btn[13].clicked.connect(self.clickWeightButton13)
        self.weight_btn[14].clicked.connect(self.clickWeightButton14)
        self.weight_btn[15].clicked.connect(self.clickWeightButton15)

        # model image
        self.img_lbl = QtWidgets.QLabel()
        self.img_lbl.setPixmap(QtGui.QPixmap(self_path + '/Images/model_weight.png'))

        # setting weight button
        name_text = ['Default\r\nSetting', 'Random\r\nSetting']
        btn = []
        for i in range(0, 2):
            btn.append(QtWidgets.QPushButton(name_text[i], self))
            btn[i].setStyleSheet(
                'color: white;'
                'background-color: rgb(58, 134, 255);'
                'border-radius: 5px;'
                'font: bold 30px Tahoma;'
                )
            btn[i].setFixedSize(200, 100)
        
        btn[GenerateWeightWidget.BUTTON_DEFAULT].clicked.connect(self.clickDefaultButton)
        btn[GenerateWeightWidget.BUTTON_RANDOM].clicked.connect(self.clickRandomButton)
        btn_vbox = QtWidgets.QVBoxLayout()
        btn_vbox.addStretch(2)
        btn_vbox.addWidget(btn[0])
        btn_vbox.addStretch(1)
        btn_vbox.addWidget(btn[1])
        btn_vbox.addStretch(2)

        mid_hbox = QtWidgets.QHBoxLayout()
        mid_hbox.addStretch(1)
        mid_hbox.addWidget(self.img_lbl)
        mid_hbox.addLayout(btn_vbox)
        mid_hbox.addStretch(1)

        vbox = QtWidgets.QVBoxLayout()
        vbox.addLayout(title.vbox)
        vbox.addWidget(component.HLine())
        vbox.addLayout(mid_hbox)
        vbox.addStretch(1)

        self.setLayout(vbox)
        self.setWindowTitle('Generate Weight Initial Value')
    
    def resizeEvent(self, event):
        count = 0
        # weight of between input layer and hidden layer
        x = self.img_lbl.x() + 165
        for i in range(0, 2):
            for j in range(0, 4):
                if i == 0:
                    y = 350 + (j * 35)
                else:
                    y = 500 + (j * 35)                    
                self.weight_btn[count].move(x, y)
                self.weight_btn[count].raise_()
                count += 1
        # weight of between hidden layer and output layer
        x = self.img_lbl.x() + 575
        for i in range(0, 4):
            for j in range(0, 2):
                if j == 0:
                    y = 350 + (i * 35)
                else:
                    y = 500 + (i * 35)
                self.weight_btn[count].move(x, y)
                self.weight_btn[count].raise_()
                count += 1

    def clickPrevButton(self):        
        self.main.stack_widget.setCurrentIndex(0)
    
    def clickNextButton(self):
        if self.weight_setting == False:
            self.clickDefaultButton()
        self.main.stack_widget.setCurrentIndex(2)
        self.main.normalize_input_data = self.main.ann.setNormalizeInputList(self.main.input_data)
        self.main.normalize_target_data = self.main.ann.setNormalizeOutputList(self.main.target_data)

    def clickWeightButton0(self):
        self.showInputDialog(0)

    def clickWeightButton1(self):
        self.showInputDialog(1)
    
    def clickWeightButton2(self):
        self.showInputDialog(2)

    def clickWeightButton3(self):
        self.showInputDialog(3)
    
    def clickWeightButton4(self):
        self.showInputDialog(4)

    def clickWeightButton5(self):
        self.showInputDialog(5)
    
    def clickWeightButton6(self):
        self.showInputDialog(6)

    def clickWeightButton7(self):
        self.showInputDialog(7)
    
    def clickWeightButton8(self):
        self.showInputDialog(8)

    def clickWeightButton9(self):
        self.showInputDialog(9)

    def clickWeightButton10(self):
        self.showInputDialog(10)
    
    def clickWeightButton11(self):
        self.showInputDialog(11)

    def clickWeightButton12(self):
        self.showInputDialog(12)
    
    def clickWeightButton13(self):
        self.showInputDialog(13)

    def clickWeightButton14(self):
        self.showInputDialog(14)
    
    def clickWeightButton15(self):
        self.showInputDialog(15)
    
    def showInputDialog(self, index):
        error = 0
        w_i = -1
        w_j = -1
        if index < 8:
            w_i = int(index / 4)
            w_j = int(index % 4)
        else:
            w_i = int(index / 2) - 4
            w_j = int(index % 2)
        
        text, ok = QtWidgets.QInputDialog.getText(self, 'Weight({0})'.format(index), 'Enter new weight(-1 ~ 1):')

        if ok == True:
            check = ord(text[0])
            if (check == 45) or ((48 <= check) and (check <= 57)):
                for i in range(1, len(text)):
                    check = ord(text[i])
                    if (check < 46) or (check == 47) or (check > 57):
                        error = 1
                        break
            else:
                error = 1

            if error == 0:
                weight = round(float(text), 5)
                if index < 8:
                    self.main.ann.V[w_i][w_j] = weight
                else:
                    self.main.ann.W[w_i][w_j] = weight              
                self.weight_btn[index].setText('%.5f'%(weight))
                if weight < -1 or weight > 1:
                    error = 2
        
        if error == 1:
            QtWidgets.QMessageBox.warning(self, 'Warning', 'Input value must be numeric    ')
        elif error == 2:
            QtWidgets.QMessageBox.information(self, 'Warning', 'It is recommended to set the weight value between -1 and 1.    ')
    
    def clickDefaultButton(self):
        self.main.ann.setOrignalWeight()
        self.weight_setting = True
        count = 0
        for i in range(0, 2):
            for h in range(0, 4):
                self.weight_btn[count].setText('%.5f'%(self.main.ann.V[i][h]))
                count += 1
        for h in range(0, 4):
            for o in range(0, 2):
                self.weight_btn[count].setText('%.5f'%(self.main.ann.W[h][o]))
                count += 1
    
    def clickRandomButton(self):
        self.main.ann.setRandomWeight()
        self.weight_setting = True
        count = 0
        for i in range(0, 2):
            for h in range(0, 4):
                self.weight_btn[count].setText('%.5f'%(self.main.ann.V[i][h]))
                count += 1
        for h in range(0, 4):
            for o in range(0, 2):
                self.weight_btn[count].setText('%.5f'%(self.main.ann.W[h][o]))
                count += 1

class LearnNeuralNetworkWidget(QtWidgets.QWidget):

    BUTTON_LEARNING_RATE = 0
    BUTTON_TARGET_ERROR = 1
    BUTTON_CURRENT_ERROR = 2
    BUTTON_COUNT = 3

    def __init__(self, parent):
        super().__init__()
        self.main = parent

        self.i_pixel = [[33, 112], [33, 290]]
        self.h_pixel = [[300, 33], [300, 143], [300, 257], [300, 367]]
        self.o_pixel = [[567, 112], [567, 290]]
        
        self.learning_tiemer = QtCore.QTimer(self)
        self.learning_tiemer.setInterval(50)
        self.learning_tiemer.timeout.connect(self.training)

        self.move_error_x = 0
        self.move_error_y = 0
        self.learning_rate = 1
        self.target_error = 0.00005      
        self.epoch = 10000000
        self.epoch_count = 0
        self.update_rate = 1
        self.e_point = []
        self.ang_xy = [[0, 0], [0, 0], [0, 0], [0, 0]]
        
        self.initUI()

    def initUI(self):
        # title layout
        title = component.Title(
            title='Learn Neural Network',
            first_line='',
            second_line='Observe the learning process of the neural network'
            )        
        title.prev_btn.clicked.connect(self.clickPrevButton)
        title.next_btn.clicked.connect(self.clickNextButton)
        
        # model background image and graph backgorund image
        self.model_img = QtWidgets.QLabel()
        self.model_img.setPixmap(QtGui.QPixmap(self_path + '/Images/model.png'))
        model_title = QtWidgets.QLabel('Neural Network Model', self)
        model_title.setStyleSheet(
            'color: Black;'
            'font: 30px Tahoma;'
            )
        self.graph_img = QtWidgets.QLabel()
        self.graph_img.setPixmap(QtGui.QPixmap(self_path + '/Images/graph.png'))
        graph_title = QtWidgets.QLabel('Error Graph', self)
        graph_title.setStyleSheet(
            'color: Black;'
            'font: 30px Tahoma;'
            )
        left_vbox = QtWidgets.QVBoxLayout()
        left_vbox.addWidget(model_title)
        left_vbox.addWidget(self.model_img)
        left_vbox.addWidget(graph_title)
        left_vbox.addWidget(self.graph_img)

        # veiw training checker
        view_title = QtWidgets.QLabel('View Robot Movement', self)
        view_title.setStyleSheet(
            'color: Black;'
            'font: 30px Tahoma;'
            )
        view_title.setAlignment(QtCore.Qt.AlignCenter)
        self.result_img = QtWidgets.QLabel()
        self.result_img.setPixmap(QtGui.QPixmap(self_path + '/Images/view.png'))
        
        legend1_img = QtWidgets.QLabel()
        legend1_img.setPixmap(QtGui.QPixmap(self_path + '/Images/legend_target.png'))
        legend1_lbl = QtWidgets.QLabel('Target point of tranning data', self)
        legend1_lbl.setStyleSheet(
            'color: rgb(150, 150, 150);'
            'font: 10px Tahoma;'
            )
        legend1_hbox = QtWidgets.QHBoxLayout()
        legend1_hbox.addWidget(legend1_img)
        legend1_hbox.addWidget(legend1_lbl)
        legend1_hbox.addStretch(1)

        legend2_img = QtWidgets.QLabel()
        legend2_img.setPixmap(QtGui.QPixmap(self_path + '/Images/legend_training.png'))
        legend2_lbl = QtWidgets.QLabel('Trainned target point', self)
        legend2_lbl.setStyleSheet(
            'color: rgb(150, 150, 150);'
            'font: 10px Tahoma;'
            )
        legend2_hbox =QtWidgets. QHBoxLayout()
        legend2_hbox.addWidget(legend2_img)
        legend2_hbox.addWidget(legend2_lbl)
        legend2_hbox.addStretch(1)
        temp_lbl = QtWidgets.QLabel('', self)
        temp_lbl.setFixedWidth(15)

        view_vbox = QtWidgets.QVBoxLayout()
        view_vbox.addWidget(self.result_img)
        view_vbox.addLayout(legend1_hbox)
        view_vbox.addLayout(legend2_hbox)
        view_hbox = QtWidgets.QHBoxLayout()
        view_hbox.addWidget(temp_lbl)
        view_hbox.addLayout(view_vbox)

        name_text = ['Learning Rate', 'Target Error', 'Current Error', 'Epoch']
        value_text = [':   1', ':   0.00005', ':   0', ':   0']
        model_setting_vbox1 = QtWidgets.QVBoxLayout()
        model_setting_vbox2 = QtWidgets.QVBoxLayout()
        model_setting_lbl = []
        self.model_setting_btn = []
        for i in range(0, 2):
            model_setting_lbl.append(QtWidgets.QLabel(name_text[i], self))
            model_setting_lbl[i].setStyleSheet(
                'color: black;'
                'font: 20px Tahoma;'
                )
            self.model_setting_btn.append(QtWidgets.QPushButton(value_text[i], self))
            self.model_setting_btn[i].setStyleSheet(
                'color: black;'
                'background-color: transparent;'
                'border-radius: 5px;'
                'font: 20px Tahoma;'
                'text-align: left'
            )
            model_setting_vbox1.addWidget(model_setting_lbl[i])
            model_setting_vbox2.addWidget(self.model_setting_btn[i])
        for i in range(2, 4):
            model_setting_lbl.append(QtWidgets.QLabel(name_text[i], self))
            model_setting_lbl[i].setStyleSheet(
                'color: rgb(150, 150, 150);'
                'font: 20px Tahoma;'
                )
            self.model_setting_btn.append(QtWidgets.QPushButton(value_text[i], self))
            self.model_setting_btn[i].setStyleSheet(
                'color: rgb(150, 150, 150);'
                'background-color: transparent;'
                'border-radius: 5px;'
                'font: 20px Tahoma;'
                'text-align: left'
            )
            model_setting_vbox1.addWidget(model_setting_lbl[i])
            model_setting_vbox2.addWidget(self.model_setting_btn[i])        
        self.model_setting_btn[LearnNeuralNetworkWidget.BUTTON_LEARNING_RATE].clicked.connect(self.clickLearningRateButton)
        self.model_setting_btn[LearnNeuralNetworkWidget.BUTTON_TARGET_ERROR].clicked.connect(self.clickTargetErrorButton)
        self.learning_btn = QtWidgets.QPushButton('', self)
        self.learning_btn.setStyleSheet(
            'image:url(./XylobotDisplayWeightChange/Images/learn.png);'
            'background-color: transparent;'
            'border-radius: 5px;'
        )
        self.learning_btn.clicked.connect(self.clickLearningButton)
        self.learning_btn.setFixedSize(72, 72)
        self.stop_btn = QtWidgets.QPushButton('', self)
        self.stop_btn.setStyleSheet(
            'image:url(./XylobotDisplayWeightChange/Images/stop.png);'
            'background-color: transparent;'
            'border-radius: 5px;'
        )
        self.stop_btn.setFixedSize(72, 72)
        self.stop_btn.clicked.connect(self.clickStopButton)
        self.stop_btn.setEnabled(False)
        control_btn_vbox = QtWidgets.QVBoxLayout()
        control_btn_vbox.addWidget(self.learning_btn)
        control_btn_vbox.addWidget(self.stop_btn)
        setting_hbox = QtWidgets.QHBoxLayout()
        setting_hbox.addLayout(model_setting_vbox1)
        setting_hbox.addLayout(model_setting_vbox2)
        setting_hbox.addStretch(1)
        setting_hbox.addLayout(control_btn_vbox)

        
        right_vbox = QtWidgets.QVBoxLayout()
        right_vbox.addWidget(view_title)
        right_vbox.addStretch(1)
        right_vbox.addLayout(view_hbox)
        right_vbox.addStretch(1)
        right_vbox.addLayout(setting_hbox)
        right_vbox.addStretch(1)

        hbox = QtWidgets.QHBoxLayout()
        hbox.addStretch(1)
        hbox.addLayout(left_vbox)
        hbox.addLayout(right_vbox)
        hbox.addStretch(1)

        vbox = QtWidgets.QVBoxLayout()
        vbox.addLayout(title.vbox)
        vbox.addWidget(component.HLine())
        vbox.addLayout(hbox)
        vbox.addStretch(1)
        
        self.setLayout(vbox)
        self.setWindowTitle('Learn Neural Network')

        self.error_img = QtWidgets.QLabel(self)
        self.error_img.setStyleSheet(
            'image:url(./XylobotDisplayWeightChange/Images/error.png);'
            'background-color: transparent;'
            )
        self.error_img.setFixedSize(11, 11)
        self.error_img.setHidden(True)
        #self.error_img.move(204, 696)

        self.training_img = []
        for i in range(0, 4):
            self.training_img.append(QtWidgets.QLabel(self))
            self.training_img[i].setStyleSheet(
                'image:url(./XylobotDisplayWeightChange/Images/training.png);'
                'background-color: transparent;'
            )
            self.training_img[i].move(-50, -50)

    def paintEvent(self, e):
        qp = QtGui.QPainter()
        qp.begin(self)
        self.updateWeightLine(qp)    # drawing weight
        self.updateTraingResult(qp)  # drawing traning result
        self.updateErrorGraph(qp)    # drawing error
        qp.end()
    
    def updateWeightLine(self, qp):
        count = 0
        pixel = [[0, 0], [0, 0]]
        for i in range(0, self.main.ann.input_node):
            for h in range(0, self.main.ann.hidden_node):
                check = self.main.ann.V[i][h]
                width = 0
                color = QtCore.Qt.red
                if check < 0:
                    color = QtCore.Qt.blue
                elif check == 0:
                    color = QtCore.Qt.white
                if abs(check) < 0.05:
                    width = 1
                else:
                    width = int(abs(round(check, 3)) * 10)
                pixel[0][0] = self.model_img.x() + self.i_pixel[i][0]
                pixel[0][1] = self.model_img.y() + self.i_pixel[i][1]
                pixel[1][0] = self.model_img.x() + self.h_pixel[h][0]
                pixel[1][1] = self.model_img.y() + self.h_pixel[h][1]          
                self.drawWeightLine(qp, color, width, pixel[0], pixel[1])
                count += 1
        for h in range(0, 4):
            for o in range(0, 2):
                check = self.main.ann.W[h][o]
                width = 0
                color = QtCore.Qt.red
                if check < 0:
                    color = QtCore.Qt.blue
                elif check == 0:
                    color = QtCore.Qt.white
                if abs(check) < 0.05:
                    width = 1
                else:
                    width = int(abs(round(check, 3)) * 10)
                pixel[0][0] = self.model_img.x() + self.h_pixel[h][0]
                pixel[0][1] = self.model_img.y() + self.h_pixel[h][1]
                pixel[1][0] = self.model_img.x() + self.o_pixel[o][0]
                pixel[1][1] = self.model_img.y() + self.o_pixel[o][1]  
                self.drawWeightLine(qp, color, width, pixel[0], pixel[1])
                count += 1

    def updateTraingResult(self, qp):
        if self.epoch_count > 0:
            for i in range(0, 4):
                x = self.main.ann.setNormalizeInput(self.main.input_data[i][0])
                y = self.main.ann.setNormalizeInput(self.main.input_data[i][1])

                result = self.main.ann.predict([x, y])
                self.ang_xy[i][0] = self.main.ann.setLocalizeOutput(result[0])
                self.ang_xy[i][1] = self.main.ann.setLocalizeOutput(result[1])
                x = self.mapping(self.ang_xy[i][0], self.main.target_data[0][0], self.main.target_data[2][0], 0, 300) + self.result_img.x()
                y = self.mapping(self.ang_xy[i][1], self.main.target_data[2][1], self.main.target_data[0][1], 50, 350) + self.result_img.y()
                self.training_img[i].move(int(x), int(y))

    def updateErrorGraph(self, qp):
        pixel = [[0, 0], [0, 0]]
        pixel[0][0] = self.error_img.x()
        pixel[0][1] = self.error_img.y()
        pixel[1][0] = self.error_img.x() + self.move_error_x
        pixel[1][1] = self.graph_img.y() - 5 + self.move_error_y
        self.drawErrorLine(qp, pixel[0], pixel[1])

    def drawWeightLine(self, qp, color, width, start, end):
        qp.setPen(QtGui.QPen(color, width))
        qp.drawLine(start[0], start[1], end[0], end[1])
    
    def drawErrorLine(self, qp, start, end):
        if self.move_error_x > 0:
            self.e_point.append([start[0] + 5, start[1] + 5, end[0] + 5, end[1] + 5])
            self.error_img.move(end[0], end[1])
            self.move_error_x = 0
        for i in range(0, len(self.e_point)):
            qp.setPen(QtGui.QPen(QtCore.Qt.red, 2))
            qp.drawLine(self.e_point[i][0], self.e_point[i][1], self.e_point[i][2], self.e_point[i][3])

    def clickPrevButton(self):
        self.main.stack_widget.setCurrentIndex(1)
    
    def clickNextButton(self):
        self.main.stack_widget.setCurrentIndex(3)

    def showInputDialog(self, index):
        error = 0        
        text, ok = QtWidgets.QInputDialog.getText(self, 'Setting({0})'.format(index), 'Enter value:')

        if ok == True:
            check = ord(text[0])
            if (48 <= check) and (check <= 57):
                for i in range(1, len(text)):
                    check = ord(text[i])
                    if (check < 46) or (check == 47) or (check > 57):
                        error = 1
                        break
            else:
                error = 1

            if error == 0:
                if float(text) == 0:
                    error = 2
                else:
                    if index == LearnNeuralNetworkWidget.BUTTON_LEARNING_RATE:
                        self.learning_rate = float(text)
                    elif index == LearnNeuralNetworkWidget.BUTTON_TARGET_ERROR:
                        self.target_error = float(text)
                    self.model_setting_btn[index].setText(':   ' + text)
        
        if error == 1:
            QtWidgets.QMessageBox.warning(self, 'Warning', 'Input value must be numeric    ')
        elif error == 2:
            QtWidgets.QMessageBox.information(self, 'Warning', '0 is not availabel.    ')    
    
    def clickLearningRateButton(self):
        self.showInputDialog(LearnNeuralNetworkWidget.BUTTON_LEARNING_RATE)

    def clickTargetErrorButton(self):
        self.showInputDialog(LearnNeuralNetworkWidget.BUTTON_TARGET_ERROR)
    
    def clickLearningButton(self):
        self.learning_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.send_count = 0

        self.main.ann.setTrainingData(self.main.normalize_input_data, self.main.normalize_target_data)
        
        self.learning_tiemer.start()
    
    def clickStopButton(self):
        self.learning_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.learning_tiemer.stop()

    def training(self):
        # ANN epoch를 1로 설정하여 타이머가 실행될때마다 1번씩 학습한다.
        self.main.ann.train(self.learning_rate, self.target_error, 1)

        # 결과 등을 현재 Class 변수등에 저장한다.
        e = self.main.ann.E
        self.epoch_count += 1

        # 그래프를 초기화한다.
        if self.epoch_count == 1:
            self.error_img.setHidden(False)
            self.initErrorGraph(e)
        if self.epoch_count % 725 == 0:
            self.e_point.clear()
            self.initErrorGraph(e)

        # 가중치와 에러 그래프를 업데이트 한다.
        if self.epoch_count % self.update_rate == 0:
            self.move_error_x = 1
            y_curr = int((e - self.target_error) * self.multi)
            self.move_error_y = int(127 - round((127 * y_curr) / self.y_start))
            if self.move_error_y < 0:
                self.reCalculateErrorGraph(e)
                y_curr = int((e - self.target_error) * self.multi)
                self.move_error_y = int(127 - round((127 * y_curr) / self.y_start))
            self.update()
        
        # 20번 마다 실로봇을 움직인다.
        if (self.epoch_count % 20 == 0) and (self.main.xylobot.is_connected == True):
            pos_1 = int(self.main.parameter.angleToPosition(0, self.ang_xy[self.send_count][0]))
            pos_2 = int(self.main.parameter.angleToPosition(1, 45))
            pos_3 = int(self.main.parameter.angleToPosition(2, self.ang_xy[self.send_count][1]))
            self.main.xylobot.writePosition(pos_1, pos_2, pos_3)
            self.send_count += 1
            if self.send_count == 4:
                self.send_count = 0

        # 현재 에러값과 에폭시를 업데이트 한다.
        self.model_setting_btn[LearnNeuralNetworkWidget.BUTTON_CURRENT_ERROR].setText(':   %f'%(e))
        self.model_setting_btn[LearnNeuralNetworkWidget.BUTTON_COUNT].setText(':   %d'%(self.epoch_count))

        # 완료 조건을 확인한다.
        if (self.epoch_count >= self.epoch) or (e <= self.target_error):
            self.learning_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.learning_tiemer.stop()
    
    def initErrorGraph(self, e):
        self.pos_num = self.checkDecimalPoint(self.target_error)
        self.multi = math.pow(10, self.pos_num)
        self.y_start = int((e - self.target_error) * self.multi)
        if self.y_start <= 0:
            self.y_start = 1
        self.error_img.move(self.graph_img.x() + 20, self.graph_img.y() -5)
    
    def reCalculateErrorGraph(self, e):
        self.y_start = int((e - self.target_error) * self.multi)
        if self.y_start <= 0:
            self.y_start = 1

    def checkDecimalPoint(self, value):
        ch = str(value)
        dot = 0
        for i in range(0, len(ch)):
            if ch[i] == '.':
                if ch[i + 2] == None:
                    dot = len(ch)
                else:
                    dot = i + 1
                break

        return len(ch) - dot
    
    def mapping(self, x, input_min, input_max, output_min, output_max):
        return (((x - input_min) * (output_max - output_min)) / (input_max - input_min)) + output_min

class ControlXylobotWidget(QtWidgets.QWidget):

    def __init__(self, parent):
        super().__init__()
        self.main = parent

        self.drawing = True
        self.last_point_x = 0
        self.last_point_y = 0
        self.draw_point = []

        self.initUI()

    def initUI(self):        
        # title layout
        title = component.Title(
            title='Control Xylobot',
            first_line='',
            second_line='Move and click the mouse to control Xylobot'
            )
        title.setEnableNextButton(False)
        title.prev_btn.clicked.connect(self.clickPrevButton)

        # 마우스 좌표 변환
        
        pixmap = QtGui.QPixmap(self_path + '/Images/board.png')
        self.board_img = QtWidgets.QLabel()
        self.board_img.setPixmap(pixmap)
        self.setMouseTracking(False)
        board_img_hbox = QtWidgets.QHBoxLayout()
        board_img_hbox.addStretch(1)
        board_img_hbox.addWidget(self.board_img)
        board_img_hbox.addStretch(1)

        # 그림 지우기
        self.clear_btn = QtWidgets.QPushButton('Clear', self)
        self.clear_btn.setStyleSheet(
            'color: rgb(58, 134, 255);'
            'background-color: rgb(230, 230, 230);'
            'border-radius: 25px;'
            'font: bold 30px Tahoma;'
            )
        self.clear_btn.setFixedSize(200, 50)
        self.clear_btn.clicked.connect(self.clickClearButton)
        clear_btn_hbox = QtWidgets.QHBoxLayout()
        clear_btn_hbox.addStretch(3)
        clear_btn_hbox.addWidget(self.clear_btn)
        clear_btn_hbox.addStretch(2)

        vbox = QtWidgets.QVBoxLayout()
        vbox.addLayout(title.vbox)
        vbox.addWidget(component.HLine())
        vbox.addStretch(1)
        vbox.addLayout(board_img_hbox)
        vbox.addStretch(1)
        vbox.addLayout(clear_btn_hbox)
        vbox.addStretch(5)

        self.setLayout(vbox)
        self.setWindowTitle('Control Xylobot')

    def paintEvent(self, e):
        qp = QtGui.QPainter()
        qp.begin(self)            
        for i in range(0, len(self.draw_point)):
            pixel = self.draw_point[i]
            qp.setPen(QtGui.QPen(QtGui.QColor(75, 217, 100), 2))
            qp.drawLine(pixel[0], pixel[1], pixel[2], pixel[3])        
        qp.end()
    
    def mousePressEvent(self, e):
        if e.button() == QtCore.Qt.LeftButton:
            self.drawing = True
            self.last_point_x = e.x()
            self.last_point_y = e.y()
    
    def mouseMoveEvent(self, e):
        if self.drawing == True:
            point_x = e.x()
            point_y = e.y()
            self.draw_point.append([self.last_point_x, self.last_point_y, point_x, point_y])
            self.last_point_x = point_x
            self.last_point_y = point_y

            if self.main.xylobot.is_connected == True:
                x = self.main.ann.setNormalizeInput(point_x - self.board_img.x())
                y = self.main.ann.setNormalizeInput(point_y - self.board_img.y())
                input_data = [x, y]
                output_data = self.main.ann.predict(input_data)
                ang_1 = self.main.ann.setLocalizeOutput(output_data[0])
                ang_2 = self.main.ann.setLocalizeOutput(output_data[1])
                pos_1 = int(self.main.parameter.angleToPosition(0, ang_1))
                pos_2 = int(self.main.parameter.angleToPosition(1, 45))
                pos_3 = int(self.main.parameter.angleToPosition(2, ang_2))
                self.main.xylobot.writePosition(pos_1, pos_2, pos_3)

            self.update()
    
    def mouseReleaseEvent(self, e):
        if e.button() == QtCore.Qt.LeftButton:
            self.drawing = False

    def clickPrevButton(self):
        self.main.stack_widget.setCurrentIndex(2)
    
    def clickClearButton(self):
        self.draw_point.clear()
        self.update()


class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, title_name, icon_path, size):
        super().__init__()
        self.title = title_name
        self.icon =  QtGui.QIcon(icon_path)
        self.size = size

        self.xylobot = xylobotSerial.ComPort()
        self.parameter = xylobot.Parameters()
        self.ann = ann.ANN(input_node=2, hidden_node=4, output_node=2, axis=4)

        self.input_data = [[50, 350], [350, 350], [350, 50], [50, 50]]  # 13_view.png 이미지 내의 목표점 좌표 픽셀
        self.target_data = [[0, 0], [0, 0], [0, 0], [0, 0]]
        self.target_original_data = [[12.00, 51.00], [-12.00, 51.00], [-12.00, 25.00], [12.00, 25.00]]
        self.normalize_input_data = [[0, 0], [0, 0], [0, 0], [0, 0]]
        self.normalize_target_data = [[0, 0], [0, 0], [0, 0], [0, 0]]

        self.initUI()
        self.openXylobot()

    
    def initUI(self):
        self.stack_widget =  QtWidgets.QStackedWidget(self)
        self.stack_widget.addWidget(GernerateDataWidget(self))
        self.stack_widget.addWidget(GenerateWeightWidget(self))
        self.stack_widget.addWidget(LearnNeuralNetworkWidget(self))
        self.stack_widget.addWidget(ControlXylobotWidget(self))
        self.setCentralWidget(self.stack_widget)
        
        back_img = QtGui.QImage('./Common/Images/background.png')
        background = QtGui.QPalette()
        background.setBrush(10, QtGui.QBrush(back_img))
        self.setPalette(background)

        self.statusBar().showMessage('Ready')
        self.statusBar().setStyleSheet(
            'color: black;'
            'font: bold 20px Tahoma;'
            )

        self.setWindowTitle(self.title)
        self.setWindowIcon(self.icon)
        self.setGeometry(150, 60, self.size[0], self.size[1])
    
    def openXylobot(self):
        self.xylobot.open()
        if self.xylobot.is_connected == True:
            ON = xylobot.Protocol.TORQUE_ON
            self.xylobot.writeTorqueStatus(ON, ON, ON)
            self.xylobot.writeSpeed(200, 200, 200)
            self.statusBar().setStyleSheet(
                'color: black;'
                'font: bold 20px Tahoma;'
                )
            self.statusBar().showMessage('Com port : Connected')
        else:
            self.statusBar().setStyleSheet(
                'color: red;'
                'font: bold 20px Tahoma;'
                )
            self.statusBar().showMessage('Com port : Connection failure')

    def closeEvent(self, event):
        self.xylobot.close()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    form = MainWindow('Weight Change v1.1.0', './Common/Images/xylobot_16x16.png', (1600, 900))    
    form.show()
    sys.exit(app.exec_())
